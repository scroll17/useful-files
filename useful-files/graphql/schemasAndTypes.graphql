## ТИПЫ ОБЬЕКТОВ И ПОЛЯ
type Character {            # Тип обьекта который мы можем извлечь
    name: String!           # Поля обьекта
    appearsIn: [Episode!]!  # Поля обьекта
}

# Character - тип обьекта GraphQL / обьектный тип (тип с некоторыми полями)
# name и appearsIn - поля в Character (единственные поля которые мы можем запросить)


# String - скалярный тип
# String! - поле не может быть пустым (NOT NULL). Сервис GQL обещает всегда отдавать вам значение, когда вы запрашиваете это поле
# [Episode!]! -
    # []! -> Всегда возвращаеться массив (пустой или с элементами);
    # Episode! -> можно ожидать что каждый елемент массива будет Episode


## АРГУМЕНТЫ
# Каждое поле в обьекте может иметь один или больше аргументов
type Starship {
    id: ID!
    name: String!
    length(unit: LengthUnit = METER): Float
}


## ТИПЫ ЗАПРОСОВ И МУТАЦИИ
schema {
    query: Query        # Точки входа для каждого запроса
    mutation: Mutation  #
}

type Query {
    hero(episode: Episode): Character
    droid(id: ID!): Droid
}


## СКАЛЯРНЫЕ ТИПЫ
type DefaultTypes {
    int: Int,         # - Целое число
    float: Float,     # - Число с плащающей точкой
    string: String,   # - UTF-8 исмвольная последовотельность
    boolean: Boolean  # - TRUE or FALSE
    id: ID            # - Уникальный индитификатор. Сереализуеться так же как и строка
}

scalar Date # Указание пользовательского скалярного типа данных


## ТИПЫ ПЕРЕЧЕСЛЕНИЙ
# Особый тип скаляров, ограниченный определенным набором допустимых значений
# Валидация -> любые аргументы этого типа являются одним из допустимых значений
# -> поле будет всегда содержать одно из конечного множества значений
enum Episode {
    NEWHOPE
    EMPIRE
    JEDI
}